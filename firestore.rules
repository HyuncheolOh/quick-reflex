rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    // Leaderboard collection rules
    match /leaderboard/{documentId} {
      // Anyone can read the leaderboard
      allow read: if true;
      
      // Only allow writes if:
      // 1. The document ID matches the user's UUID + game type pattern
      // 2. The userId field matches the first part of the document ID
      // 3. Required fields are present
      allow create: if request.auth == null && 
        request.resource.data.keys().hasAll(['userId', 'nickname', 'gameType', 'bestTime', 'averageTime', 'gamesPlayed', 'accuracy', 'timestamp']) &&
        request.resource.data.userId is string &&
        request.resource.data.nickname is string &&
        request.resource.data.gameType in ['TAP_TEST', 'AUDIO_TEST', 'GO_NO_GO_TEST'] &&
        request.resource.data.bestTime is number &&
        request.resource.data.averageTime is number &&
        request.resource.data.gamesPlayed is int &&
        request.resource.data.accuracy is number &&
        request.resource.data.timestamp is number &&
        documentId == request.resource.data.userId + '_' + request.resource.data.gameType;
      
      // Allow updates only if improving the score (lower bestTime)
      allow update: if request.auth == null &&
        request.resource.data.userId == resource.data.userId &&
        request.resource.data.gameType == resource.data.gameType &&
        request.resource.data.bestTime < resource.data.bestTime &&
        documentId == request.resource.data.userId + '_' + request.resource.data.gameType;
      
      // No deletes allowed
      allow delete: if false;
    }
    
    // User stats collection rules
    match /user_stats/{documentId} {
      // Anyone can read user stats
      allow read: if true;
      
      // Allow creates and updates with proper validation
      allow create, update: if request.auth == null &&
        request.resource.data.keys().hasAll(['userId', 'nickname', 'gameType', 'bestTime', 'averageTime', 'gamesPlayed', 'accuracy']) &&
        request.resource.data.userId is string &&
        request.resource.data.nickname is string &&
        request.resource.data.gameType in ['TAP_TEST', 'AUDIO_TEST', 'GO_NO_GO_TEST'] &&
        request.resource.data.bestTime is number &&
        request.resource.data.averageTime is number &&
        request.resource.data.gamesPlayed is int &&
        request.resource.data.accuracy is number &&
        documentId == request.resource.data.userId + '_' + request.resource.data.gameType;
      
      // No deletes allowed
      allow delete: if false;
    }
  }
}